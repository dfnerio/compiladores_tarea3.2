
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'parserleftPLUSMINUSleftTIMESDIVIDECOMMA CTEF CTEI DIGITS DIVIDE DOTCOMMA DOTS ELSE EQUAL FLOAT ID IF INT LBRACK LETTER LPAREN MINUS PLUS PRINT PROGRAM RBRACK RELOP RPAREN THEN TIMES VAR WHILE WS parser  : programa\n                | bloque\n                | vars\n                | estatuto\n                | asignacion\n                | condicion\n                | escritura\n                | expresion\n                | varcte\n                | exp\n                | termino\n                | factor\n                | tipo\n                | empty vars  : VAR v1\n        v1        : ID v2 DOTS tipo DOTCOMMA v1\n                  | empty\n        v2        : COMMA ID v2\n                  | empty programa  : PROGRAM ID DOTS p1 bloque\n        p1        : vars\n                  | empty bloque  : LBRACK b1 RBRACK\n        b1      : estatuto b1\n                | empty estatuto  : asignacion\n                  | condicion\n                  | escrituraasignacion  : ID EQUAL expresion condicion : IF LPAREN expresion RPAREN bloque c1 DOTCOMMA\n        c1        : ELSE bloque\n                  | empty escritura : PRINT LPAREN es1 RPAREN DOTCOMMA\n        es1       : expresion es2\n                  | ID es2\n        es2       : COMMA es1\n                  | empty expresion : exp e1\n        e1        : e2 exp\n                  | empty\n        e2        : RELOP\n     exp : termino ex1\n        ex1 : ex2 exp\n            | empty\n        ex2 : PLUS\n            | MINUS\n     termino : factor t1\n        t1      : t2 termino\n                | empty\n        t2      : TIMES\n                | DIVIDE\n                | empty\n     factor  : f1\n                | f2\n        f1      : LPAREN expresion RPAREN\n        f2      : f3 varcte\n        f3      : PLUS\n                | MINUS\n                | empty\n     varcte  : ID\n                | CTEI\n                | CTEFtipo : INT\n            | FLOATempty :'
    
_lr_action_items = {'PROGRAM':([0,],[16,]),'LBRACK':([0,19,55,57,70,82,83,84,87,99,101,103,],[18,-65,-15,-17,-65,18,-21,-22,18,-65,18,-16,]),'VAR':([0,70,],[19,19,]),'ID':([0,13,15,16,18,19,21,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,49,51,52,53,58,60,61,62,63,64,65,66,67,68,69,71,75,78,90,97,99,104,],[17,-65,-59,46,54,56,-65,-61,-62,-53,-54,66,-57,-58,-38,-65,-40,-41,-42,-65,-44,-45,-46,-47,-65,-49,-50,-51,-65,54,-26,-27,-28,-65,-65,-65,-65,-59,81,-56,-60,-39,-43,-48,-29,86,-55,81,-33,56,-30,]),'IF':([0,18,23,24,25,26,32,34,36,38,41,43,49,51,52,53,60,61,62,65,66,67,68,69,71,78,97,104,],[20,20,-61,-62,-53,-54,-38,-40,-42,-44,-47,-49,20,-26,-27,-28,-65,-65,-65,-56,-60,-39,-43,-48,-29,-55,-33,-30,]),'PRINT':([0,18,23,24,25,26,32,34,36,38,41,43,49,51,52,53,60,61,62,65,66,67,68,69,71,78,97,104,],[22,22,-61,-62,-53,-54,-38,-40,-42,-44,-47,-49,22,-26,-27,-28,-65,-65,-65,-56,-60,-39,-43,-48,-29,-55,-33,-30,]),'CTEI':([0,13,15,21,23,24,25,26,29,30,31,33,35,37,39,40,42,43,44,45,47,58,62,63,64,65,66,78,90,],[23,-65,-59,-65,-61,-62,-53,-54,23,-57,-58,-65,-41,-65,-45,-46,-65,-52,-50,-51,-65,-65,-65,-59,-65,-56,-60,-55,-65,]),'CTEF':([0,13,15,21,23,24,25,26,29,30,31,33,35,37,39,40,42,43,44,45,47,58,62,63,64,65,66,78,90,],[24,-65,-59,-65,-61,-62,-53,-54,24,-57,-58,-65,-41,-65,-45,-46,-65,-52,-50,-51,-65,-65,-65,-59,-65,-56,-60,-55,-65,]),'INT':([0,85,],[27,27,]),'FLOAT':([0,85,],[28,28,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,19,23,24,25,26,27,28,32,34,36,38,41,43,55,57,60,61,62,65,66,67,68,69,71,72,78,93,97,99,103,104,],[-65,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-60,-65,-61,-62,-53,-54,-63,-64,-38,-40,-42,-44,-47,-49,-15,-17,-65,-65,-65,-56,-60,-39,-43,-48,-29,-23,-55,-20,-33,-65,-16,-30,]),'LPAREN':([0,13,20,21,22,23,24,25,26,33,35,37,39,40,42,43,44,45,47,58,62,64,65,66,78,90,],[21,-65,58,21,64,-61,-62,-53,-54,21,-41,21,-45,-46,21,-52,-50,-51,21,21,-65,21,-56,-60,-55,21,]),'PLUS':([0,12,13,21,23,24,25,26,33,35,37,39,40,41,42,43,44,45,47,58,61,62,64,65,66,69,78,90,],[30,39,-65,30,-61,-62,-53,-54,30,-41,30,-45,-46,-47,30,-49,-50,-51,30,30,39,-65,30,-56,-60,-48,-55,30,]),'MINUS':([0,12,13,21,23,24,25,26,33,35,37,39,40,41,42,43,44,45,47,58,61,62,64,65,66,69,78,90,],[31,40,-65,31,-61,-62,-53,-54,31,-41,31,-45,-46,-47,31,-49,-50,-51,31,31,40,-65,31,-56,-60,-48,-55,31,]),'RELOP':([11,12,13,23,24,25,26,36,38,41,43,60,61,62,65,66,68,69,78,],[35,-65,-65,-61,-62,-53,-54,-42,-44,-47,-49,35,-65,-65,-56,-60,-43,-48,-55,]),'TIMES':([13,23,24,25,26,62,65,66,78,],[44,-61,-62,-53,-54,44,-56,-60,-55,]),'DIVIDE':([13,23,24,25,26,62,65,66,78,],[45,-61,-62,-53,-54,45,-56,-60,-55,]),'EQUAL':([17,54,],[47,47,]),'RBRACK':([18,23,24,25,26,32,34,36,38,41,43,48,49,50,51,52,53,60,61,62,65,66,67,68,69,71,73,78,97,104,],[-65,-61,-62,-53,-54,-38,-40,-42,-44,-47,-49,72,-65,-25,-26,-27,-28,-65,-65,-65,-56,-60,-39,-43,-48,-29,-24,-55,-33,-30,]),'RPAREN':([23,24,25,26,32,34,36,38,41,43,59,60,61,62,65,66,67,68,69,77,78,79,80,81,89,91,92,98,],[-61,-62,-53,-54,-38,-40,-42,-44,-47,-49,78,-65,-65,-65,-56,-60,-39,-43,-48,87,-55,88,-65,-65,-34,-37,-35,-36,]),'COMMA':([23,24,25,26,32,34,36,38,41,43,56,60,61,62,65,66,67,68,69,78,80,81,86,],[-61,-62,-53,-54,-38,-40,-42,-44,-47,-49,75,-65,-65,-65,-56,-60,-39,-43,-48,-55,90,90,75,]),'DOTCOMMA':([27,28,72,88,94,96,100,102,105,],[-63,-64,-23,97,99,-65,104,-32,-31,]),'DOTS':([46,56,74,76,86,95,],[70,-65,85,-19,-65,-18,]),'ELSE':([72,96,],[-23,101,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parser':([0,],[1,]),'programa':([0,],[2,]),'bloque':([0,82,87,101,],[3,93,96,105,]),'vars':([0,70,],[4,83,]),'estatuto':([0,18,49,],[5,49,49,]),'asignacion':([0,18,49,],[6,51,51,]),'condicion':([0,18,49,],[7,52,52,]),'escritura':([0,18,49,],[8,53,53,]),'expresion':([0,21,47,58,64,90,],[9,59,71,77,80,80,]),'varcte':([0,29,],[10,65,]),'exp':([0,21,33,37,47,58,64,90,],[11,60,67,68,60,60,60,60,]),'termino':([0,21,33,37,42,47,58,64,90,],[12,61,61,61,69,61,61,61,61,]),'factor':([0,21,33,37,42,47,58,64,90,],[13,62,62,62,62,62,62,62,62,]),'tipo':([0,85,],[14,94,]),'empty':([0,11,12,13,18,19,21,33,37,42,47,49,56,58,60,61,62,64,70,80,81,86,90,96,99,],[15,34,38,43,50,57,63,63,63,63,63,50,76,63,34,38,43,63,84,91,91,76,63,102,57,]),'f1':([0,21,33,37,42,47,58,64,90,],[25,25,25,25,25,25,25,25,25,]),'f2':([0,21,33,37,42,47,58,64,90,],[26,26,26,26,26,26,26,26,26,]),'f3':([0,21,33,37,42,47,58,64,90,],[29,29,29,29,29,29,29,29,29,]),'e1':([11,60,],[32,32,]),'e2':([11,60,],[33,33,]),'ex1':([12,61,],[36,36,]),'ex2':([12,61,],[37,37,]),'t1':([13,62,],[41,41,]),'t2':([13,62,],[42,42,]),'b1':([18,49,],[48,73,]),'v1':([19,99,],[55,103,]),'v2':([56,86,],[74,95,]),'es1':([64,90,],[79,98,]),'p1':([70,],[82,]),'es2':([80,81,],[89,92,]),'c1':([96,],[100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> parser","S'",1,None,None,None),
  ('parser -> programa','parser',1,'p_parser','parser.py',15),
  ('parser -> bloque','parser',1,'p_parser','parser.py',16),
  ('parser -> vars','parser',1,'p_parser','parser.py',17),
  ('parser -> estatuto','parser',1,'p_parser','parser.py',18),
  ('parser -> asignacion','parser',1,'p_parser','parser.py',19),
  ('parser -> condicion','parser',1,'p_parser','parser.py',20),
  ('parser -> escritura','parser',1,'p_parser','parser.py',21),
  ('parser -> expresion','parser',1,'p_parser','parser.py',22),
  ('parser -> varcte','parser',1,'p_parser','parser.py',23),
  ('parser -> exp','parser',1,'p_parser','parser.py',24),
  ('parser -> termino','parser',1,'p_parser','parser.py',25),
  ('parser -> factor','parser',1,'p_parser','parser.py',26),
  ('parser -> tipo','parser',1,'p_parser','parser.py',27),
  ('parser -> empty','parser',1,'p_parser','parser.py',28),
  ('vars -> VAR v1','vars',2,'p_vars','parser.py',33),
  ('v1 -> ID v2 DOTS tipo DOTCOMMA v1','v1',6,'p_vars','parser.py',34),
  ('v1 -> empty','v1',1,'p_vars','parser.py',35),
  ('v2 -> COMMA ID v2','v2',3,'p_vars','parser.py',36),
  ('v2 -> empty','v2',1,'p_vars','parser.py',37),
  ('programa -> PROGRAM ID DOTS p1 bloque','programa',5,'p_programa','parser.py',42),
  ('p1 -> vars','p1',1,'p_programa','parser.py',43),
  ('p1 -> empty','p1',1,'p_programa','parser.py',44),
  ('bloque -> LBRACK b1 RBRACK','bloque',3,'p_bloque','parser.py',49),
  ('b1 -> estatuto b1','b1',2,'p_bloque','parser.py',50),
  ('b1 -> empty','b1',1,'p_bloque','parser.py',51),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','parser.py',56),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','parser.py',57),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','parser.py',58),
  ('asignacion -> ID EQUAL expresion','asignacion',3,'p_asignacion','parser.py',63),
  ('condicion -> IF LPAREN expresion RPAREN bloque c1 DOTCOMMA','condicion',7,'p_condicion','parser.py',68),
  ('c1 -> ELSE bloque','c1',2,'p_condicion','parser.py',69),
  ('c1 -> empty','c1',1,'p_condicion','parser.py',70),
  ('escritura -> PRINT LPAREN es1 RPAREN DOTCOMMA','escritura',5,'p_escritura','parser.py',75),
  ('es1 -> expresion es2','es1',2,'p_escritura','parser.py',76),
  ('es1 -> ID es2','es1',2,'p_escritura','parser.py',77),
  ('es2 -> COMMA es1','es2',2,'p_escritura','parser.py',78),
  ('es2 -> empty','es2',1,'p_escritura','parser.py',79),
  ('expresion -> exp e1','expresion',2,'p_expresion','parser.py',84),
  ('e1 -> e2 exp','e1',2,'p_expresion','parser.py',85),
  ('e1 -> empty','e1',1,'p_expresion','parser.py',86),
  ('e2 -> RELOP','e2',1,'p_expresion','parser.py',87),
  ('exp -> termino ex1','exp',2,'p_exp','parser.py',93),
  ('ex1 -> ex2 exp','ex1',2,'p_exp','parser.py',94),
  ('ex1 -> empty','ex1',1,'p_exp','parser.py',95),
  ('ex2 -> PLUS','ex2',1,'p_exp','parser.py',96),
  ('ex2 -> MINUS','ex2',1,'p_exp','parser.py',97),
  ('termino -> factor t1','termino',2,'p_termino','parser.py',103),
  ('t1 -> t2 termino','t1',2,'p_termino','parser.py',104),
  ('t1 -> empty','t1',1,'p_termino','parser.py',105),
  ('t2 -> TIMES','t2',1,'p_termino','parser.py',106),
  ('t2 -> DIVIDE','t2',1,'p_termino','parser.py',107),
  ('t2 -> empty','t2',1,'p_termino','parser.py',108),
  ('factor -> f1','factor',1,'p_factor','parser.py',114),
  ('factor -> f2','factor',1,'p_factor','parser.py',115),
  ('f1 -> LPAREN expresion RPAREN','f1',3,'p_factor','parser.py',116),
  ('f2 -> f3 varcte','f2',2,'p_factor','parser.py',117),
  ('f3 -> PLUS','f3',1,'p_factor','parser.py',118),
  ('f3 -> MINUS','f3',1,'p_factor','parser.py',119),
  ('f3 -> empty','f3',1,'p_factor','parser.py',120),
  ('varcte -> ID','varcte',1,'p_varcte','parser.py',126),
  ('varcte -> CTEI','varcte',1,'p_varcte','parser.py',127),
  ('varcte -> CTEF','varcte',1,'p_varcte','parser.py',128),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',133),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',134),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',139),
]
